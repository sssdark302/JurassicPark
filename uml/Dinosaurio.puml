@startuml
'https://plantuml.com/class-diagram
title Dinosaurio

abstract class Dinosaurio{
    -gestorCV: GestorCV
    -especie: string
    -edad: int
    -peso_maximo int
    -hp_maximae: int
    -altura_maxima: int
    -Sexo sexo
    -tuvoHijos: boolean
    +Dinosaurio(especie: string, edad: int, peso_maximo: int, altura_maxima: int, sexo: Sexo, tuvoHijos: boolean, hp_maxima: float)
    +getEspecie(): string
    +getEdad(): int
    +getPeso(): int
    +getAltura(): int
    +getSexo(): Sexo
    +getTuvoHijos(): boolean
}
enum Sexo{
    -MACHO
    -HEMBRA
}
entity Dinos{
    -id: int
    -especie: string
    -edad: int
    -peso_maximo: int
    -altura_maxima: int
    -sexo: string
    -tuvoHijos: boolean
    -tipo: String
    -hp_maxima
}

entity InstalacionE{

}

interface DinosaurioRepository{
    +findDinosauriobyId(id: int): Dinos
    +findDinosauriobyEspecie(especie: string): Dinos
    +findDinosauriobyTipo(tipo: String): Dinos
}

interface InstalacionRepository{
    +findInstalacionbyId(id: int): Instalacion
    +findInstalacionbyNombre(nombre: string): Instalacion
    +findInstalacionbyTipo(tipo: string): Instalacion
}

class DinosaurioService{
    +agregarDinosaurio(Dinos): void
    +eliminarDinosaurio(Dinos): void
}
class InstalacionService{
    +agregarInstalacion(InstalacionE): void
    +eliminarInstalacion(InstalacionE): void
}

class Sensor{
    -temperaturaCorporal: double
    -estado: boolean
    +getTemperaturaCorporal(): double
    +getEstado(): boolean
}
class DinosaurioController{
    +mostrarDinosaurio(String especie): void
}
class DinosaurioDataStore{
    +cargarDatosCSV(String rutaCSV): void
    +DinosaurioDataStore getInstance(): DinosaurioDataStore
    +getDinosaurio(String especie): Dinosaurio
    +getAllDinosaurios(): void
    +getAllDinosauriosAsJSON(): void
}

abstract class DinosaurioFactory{
    +crearDinosaurio(tipo: String): Dinosaurio
}

abstract class FactoriaInstalaciones{
    +crearInstalacion(tipo: String): Instalacion
}

class Instalacion{
    -nombre: string
    -capacidad: int
    -temperatura: double
    -humedad- double
    -tipo: string
    -terreno: int
    +Instalacion(terreno: int, nombre: string, capacidad: int, temperatura: double, tipo: string, humedad: double)
    +getNombre(): string
    +getCapacidad(): int
    +getTemperatura(): double
    +getHumedad(): double
    +getTipo(): string
    +getTerreno(): int
}

class Criadero extends Instalacion{}
class Laboratorio extends Instalacion{}
class Muelle extends Instalacion{}
class Puesto extends Instalacion{}

interface CiclodeVida{
    +nacer(): void
    +crecer(): void
    +adulto(): void
    +reproducir(): void
    +morir(): void
}

class GestorCV{
    +obtenerFase(Dinosaurio): void
    +iniciarCiclo(Dinosaurio): void
    +AvanzarFase(Dinosaurio): void
    +VerificarReproduccion(Dinosaurio): void
    +FaseAdulto(Dinosaurio): void
    +TerminarCiclo(Dinosaurio): void
    +seReproducio(Dinosaurio): void
    +verificarMadre(Dinosaurio): void
    +obtenerTiempoDeEsperaPorFase(FaseCicloVida): void
    +acelerarFase(FaseCicloVida): void
}

enum FaseCicloVida{
    -HUEVO
    -NACIMIENTO
    -CRECIMIENTO
    -ADULTO
    -REPRODUCCION
    -MUERTE
}
Dinosaurio -->  Sensor
Sexo --> Dinosaurio
GestorCV *--> Dinosaurio
Herbivoro --> Dinosaurio
Carnivoro --> Dinosaurio
Omnivoro --> Dinosaurio
GestorCV ..|> CiclodeVida
DinosaurioFactory ..> Dinosaurio
FactoriaInstalaciones ..> Instalacion
Dinosaurio --> DinosaurioController
Dinosaurio --> DinosaurioView
FaseCicloVida --> GestorCV

@enduml
